void SortLinkedList()
    {
    struct LinkedNode *node=NULL, 

	*temp = NULL;
    int tempvar;//temp variable to store node data
    node = start;
    //temp = node;//temp node to hold node data and next link
    while(node != NULL)
    {
        temp=node; 
        while (temp->next !=NULL)//travel till the second last element 
        {
           if(temp->data > temp->next->data)// compare the data of the nodes 
            {
              tempvar = temp->data;
              temp->data = temp->next->data;// swap the data
              temp->next->data = tempvar;
            }
         temp = temp->next;    // move to the next element 
        }
        node = node->next;    // move to the next node
    }
}



#include <stdio.h>

void insertionSort(int arr[], int n) {
    int i, key, j;
    for (i = 1; i < n; i++) {
        key = arr[i];
        j = i - 1;

        // Mover los elementos de arr[0..i-1] que son mayores que key
        // a una posición por delante de su posición actual
        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            j = j - 1;
        }
        arr[j + 1] = key;
    }
}

int main() {
    int arr[] = {12, 11, 13, 5, 6};
    int n = sizeof(arr) / sizeof(arr[0]);

    insertionSort(arr, n);

    printf("Array ordenado: \n");
    for (int i = 0; i < n; i++)
        printf("%d ", arr[i]);

    return 0;
}













#include <stdio.h>

typedef struct s_node
{
    int value;
    int index;
    struct s_node *next;
    struct s_node *previous;
} t_node;

void insertionSort(t_node **head_ref) {
    t_node *sorted = NULL;
    t_node *current = *head_ref;

    while (current != NULL) {
        t_node *next = current->next;

        if (sorted == NULL || sorted->index > current->index) {
            current->next = sorted;
            current->previous = NULL;
            if (sorted != NULL) {
                sorted->previous = current;
            }
            sorted = current;
        } else {
            t_node *temp = sorted;
            while (temp->next != NULL && temp->next->index < current->index) {
                temp = temp->next;
            }
            current->next = temp->next;
            if (temp->next != NULL) {
                temp->next->previous = current;
            }
            temp->next = current;
            current->previous = temp;
        }

        current = next;
    }

    *head_ref = sorted;
}

void printList(t_node *node) {
    while (node != NULL) {
        printf("(%d, %d) ", node->value, node->index);
        node = node->next;
    }
    printf("\n");
}

int main() {
    t_node *head = NULL;

    // Agregar nodos a la lista (cambia según tus necesidades)
    // Aquí se agrega un ejemplo de lista para ilustrar el ordenamiento
    for (int i = 5; i >= 1; i--) {
        t_node *new_node = (t_node *)malloc(sizeof(t_node));
        new_node->value = i * 10;
        new_node->index = i;
        new_node->next = head;
        new_node->previous = NULL;
        if (head != NULL) {
            head->previous = new_node;
        }
        head = new_node;
    }

    printf("Lista no ordenada: ");
    printList(head);

    insertionSort(&head);

    printf("Lista ordenada: ");
    printList(head);

    return 0;
}





